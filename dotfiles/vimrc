set nocompatible
"Vim plugins
call plug#begin('~/.vim/plugged')
Plug 'editorconfig/editorconfig-vim'
Plug 'mattn/emmet-vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'w0rp/ale'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdcommenter'
Plug 'ntk148v/vim-horizon'
Plug 'itchyny/lightline.vim'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'leafgarland/typescript-vim'
Plug 'sheerun/vim-polyglot'
Plug 'alaviss/nim.nvim'
call plug#end()

"Settings
set encoding=UTF-8
set whichwrap+=<,>,[,]
let g:ale_fixers = {
 \ 'javascript': ['eslint'],
 \ 'typescript': ['eslint'],
 \ 'css': ['prettier'],
 \ 'scss': ['prettier'],
 \ }
set noshowmode

"Theme
syntax on
set termguicolors
colorscheme horizon
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠️'
let g:ale_fix_on_save = 1
highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow

"right arrow next line basically
set whichwrap+=<,>,[,]
set expandtab

autocmd BufRead,BufNewFile *.nim set foldlevel=100

" .parcelrc should be json5
autocmd BufNewFile,BufRead .parcelrc set syntax=json5

" set filetypes as typescriptreact
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact

"coc config
let g:coc_global_extensions = [
    \ "coc-snippets",
    \ "coc-pairs",
    \ "coc-tsserver",
    \ "coc-eslint",
    \ "coc-prettier",
    \ "coc-json",
    \ "coc-git",
    \ "coc-yaml",
    \ "coc-toml",
    \ ]

"Nerd tree
let g:NERDTreeIgnore = ['^node_modules$']

nnoremap <C-n> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

"jsonc
autocmd FileType json syntax match Comment +\/\/.\+$+

"Nerd Commenter
vmap <C-_> \c<space><CR>gv
nmap <C-_> \c<space><CR>
imap <C-_> <esc>\c<space><CR>i

"Prettier
command! -nargs=0 Prettier :CocCommand prettier.formatFile
vmap <leader>f :Prettier<CR>
nmap <leader>f :Prettier<CR>

"Lightline status
function! LightlineGitStatus() abort
  let blame = get(g:, 'coc_git_status', '')
  " return blame
  return winwidth(0) > 120 ? blame : ''
endfunction
let g:lightline = {
    \ 'colorscheme': 'one',
    \ 'active': {
    \   'left': [
    \     [ 'mode', 'paste' ],
    \     [ 'ctrlpmark', 'git', 'diagnostic', 'cocstatus', 'filename', 'method' ]
    \   ],
    \   'right': [
    \     [ 'filetype', 'fileencoding', 'lineinfo', 'percent' ],
    \     [ 'status' ],
    \   ],
    \ },
    \ "component_function": {
    \    "status": "LightlineGitStatus",
    \ },
\ }

"Markdown preview
nmap <C-p> <Plug>MarkdownPreviewToggle

let g:user_emmet_settings = {
\   'html': {
\       'snippets': {
\           'html:5': '!!!+html>(head>(meta[charset=${charset}]+meta[name="viewport" content="width=device-width,initial-scale=1.0"]+meta[http-equiv="X-UA-Compatible" content="ie=edge"]+title +body'
    \   }
 \  }
\}


